/*
 * Aspose OCR Cloud 5.0 API
 *
 * Aspose OCR Cloud 5.0 API
 *
 * The version of the OpenAPI document: 5.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Aspose.OCR.Cloud.SDK.Client.OpenAPIDateConverter;

namespace Aspose.OCR.Cloud.SDK.Model
{
    /// <summary>
    /// Response with Recognition result for specific task ID
    /// </summary>
    [DataContract(Name = "OCRResponse")]
    public partial class OCRResponse : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ResponseStatusCode
        /// </summary>
        [DataMember(Name = "responseStatusCode", EmitDefaultValue = false)]
        public ResponseStatusCode? ResponseStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets TaskStatus
        /// </summary>
        [DataMember(Name = "taskStatus", EmitDefaultValue = false)]
        public OCRTaskStatus? TaskStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OCRResponse" /> class.
        /// </summary>
        /// <param name="id">The specific Task ID that result was made for.</param>
        /// <param name="responseStatusCode">responseStatusCode.</param>
        /// <param name="taskStatus">taskStatus.</param>
        /// <param name="error">error.</param>
        public OCRResponse(string id = default(string), ResponseStatusCode? responseStatusCode = default(ResponseStatusCode?), OCRTaskStatus? taskStatus = default(OCRTaskStatus?), OCRError error = default(OCRError))
        {
            this.Id = id;
            this.ResponseStatusCode = responseStatusCode;
            this.TaskStatus = taskStatus;
            this.Error = error;
        }

        /// <summary>
        /// The specific Task ID that result was made for
        /// </summary>
        /// <value>The specific Task ID that result was made for</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// List of results - Especially Text or PDF files
        /// </summary>
        /// <value>List of results - Especially Text or PDF files</value>
        [DataMember(Name = "results", EmitDefaultValue = true)]
        public List<OCRResult> Results { get; private set; }

        /// <summary>
        /// Returns false as Results should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResults()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public OCRError Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OCRResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ResponseStatusCode: ").Append(ResponseStatusCode).Append("\n");
            sb.Append("  TaskStatus: ").Append(TaskStatus).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
