/*
 * Aspose OCR Cloud 5.0 API
 *
 * Aspose OCR Cloud 5.0 API
 *
 * The version of the OpenAPI document: 5.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Aspose.OCR.Cloud.SDK.Client;
using Aspose.OCR.Cloud.SDK.Client.Auth;
using Aspose.OCR.Cloud.SDK.Api;
using Aspose.OCR.Cloud.SDK.Model;
using System.Text.RegularExpressions;
using System.Threading;
using System.Text;

namespace Aspose.OCR.Cloud.SDK.Test.Api
{
    /// <summary>
    ///  Class for testing PublicApi
    /// </summary>

    [TestFixture]
    public class PublicApiTests
    {
        public const string clientId = "";
        public const string clientSecret = "";


        [SetUp]
        public void Setup()
        {
            Directory.CreateDirectory("results");
        }




        [Test]
        public void PublicImageProcessingApiTest()
        {
            var apiInstance = new ImageProcessingApi(clientId, clientSecret);

            string taskId = "";

            using (Stream stream = File.OpenRead("samples/binarization.jpeg"))
            {
                taskId = apiInstance.PostBinarizationFile(stream);
            }
            Thread.Sleep(10000);
            var responseBinarization = apiInstance.GetResultTask(taskId);
            Assert.IsNotNull(responseBinarization);
            Assert.That(responseBinarization.ResponseStatusCode == ResponseStatusCode.Ok);
            File.WriteAllBytes($"results/{taskId}.png", responseBinarization.Results[0].Data);

            using (Stream stream = File.OpenRead("samples/latin_skew.png"))
            {
                taskId = apiInstance.PostBinarizationFile(stream);
            }
            Thread.Sleep(10000);
            var responseSkewCorrection = apiInstance.GetResultTask(taskId);
            Assert.IsNotNull(responseSkewCorrection);
            Assert.That(responseSkewCorrection.ResponseStatusCode == ResponseStatusCode.Ok);
            File.WriteAllBytes($"results/{taskId}.png", responseSkewCorrection.Results[0].Data);

            using (Stream stream = File.OpenRead("samples/dewarping.png"))
            {
                taskId = apiInstance.PostBinarizationFile(stream);
            }
            Thread.Sleep(10000);
            var responseDewarping = apiInstance.GetResultTask(taskId);
            Assert.IsNotNull(responseDewarping);
            Assert.That(responseDewarping.ResponseStatusCode == ResponseStatusCode.Ok);
            File.WriteAllBytes($"results/{taskId}.png", responseDewarping.Results[0].Data);

            using (Stream stream = File.OpenRead("samples/upsampling.png"))
            {
                taskId = apiInstance.PostBinarizationFile(stream);
            }
            Thread.Sleep(10000);
            var responseUpsampling = apiInstance.GetResultTask(taskId);
            Assert.IsNotNull(responseUpsampling);
            Assert.That(responseUpsampling.ResponseStatusCode == ResponseStatusCode.Ok);
            File.WriteAllBytes($"results/{taskId}.png", responseUpsampling.Results[0].Data);
        }


        [Test]
        public void PublicTextToSpeechApiTest()
        {
            var apiInstance = new TextToSpeechApi(clientId, clientSecret);

            var requestBody = new TTSBody(
                    text: "Text to speech test",
                    language: LanguageTTS.English,
                    resultType: ResultTypeTTS.Wav);
            string taskId = apiInstance.PostTextToSpeech(requestBody);
            Thread.Sleep(10000);
            var response = apiInstance.GetTextToSpeechResult(taskId);
            Assert.IsNotNull(response);
            Assert.That(response.ResponseStatusCode == ResponseStatusCode.Ok);
            File.WriteAllBytes($"results/{taskId}.wav", response.Results[0].Data);
        }


        [Test]
        public void PublicDetectRegionsApiTest()
        {
            var apiInstance = new DetectRegionsApi(clientId, clientSecret);

            var requestBody = new OCRDetectRegionsBody(
                    image: File.ReadAllBytes("samples/greek.png"),
                    settings: new OCRSettingsDetectRegions(
                        makeSkewCorrect: false,
                        makeContrastCorrection: false,
                        dsrMode: DsrMode.Regions,
                        makeBinarization: false,
                        resultType: ResultType.Text));
            string taskId = apiInstance.PostDetectRegions(requestBody);
            Thread.Sleep(10000);
            var response = apiInstance.GetDetectRegions(taskId);
            Assert.IsNotNull(response);
            Assert.That(response.ResponseStatusCode == ResponseStatusCode.Ok);
            File.WriteAllText($"results/{taskId}.txt", Encoding.UTF8.GetString(response.Results[0].Data));
        }


        [Test]
        public void PublicRecognizeImageApiTest()
        {
            var apiInstance = new RecognizeImageApi(clientId, clientSecret);

            var requestBody = new OCRRecognizeImageBody(
                    image: File.ReadAllBytes("samples/latin.png"),
                    settings: new OCRSettingsRecognizeImage(
                        language: Language.English,
                        makeBinarization: true,
                        makeSkewCorrect: true,
                        dsrMode: DsrMode.NoDsrNoFilter
                        ));
            string taskId = apiInstance.PostRecognizeImage(requestBody);
            Thread.Sleep(5000);
            var response = apiInstance.GetRecognizeImage(taskId);
            Assert.IsNotNull(response);
            Assert.That(response.ResponseStatusCode == ResponseStatusCode.Ok);
            File.WriteAllText($"results/{taskId}.txt", Encoding.UTF8.GetString(response.Results[0].Data));
        }


        [Test]
        public void PublicRecognizePdfApiTest()
        {
            var apiInstance = new RecognizePdfApi(clientId, clientSecret);

            var requestBody = new OCRRecognizePdfBody(
                    image: File.ReadAllBytes("samples/latin.pdf"),
                    settings: new OCRSettingsRecognizePdf(
                        Language.English,
                        dsrMode: DsrMode.NoDsrNoFilter,
                        makeBinarization: true));
            string taskId = apiInstance.PostRecognizePdf(requestBody);
            Thread.Sleep(5000);
            var response = apiInstance.GetRecognizePdf(taskId);
            Assert.IsNotNull(response);
            Assert.That(response.ResponseStatusCode == ResponseStatusCode.Ok);
            File.WriteAllText($"results/{taskId}.txt", Encoding.UTF8.GetString(response.Results[0].Data));
        }


        [Test]
        public void PublicRecognizeReceiptApiTest()
        {
            var apiInstance = new RecognizeReceiptApi(clientId, clientSecret);

            var requestBody = new OCRRecognizeReceiptBody(
                image: File.ReadAllBytes("samples/receipt.PNG"),
                settings: new OCRSettingsRecognizeReceipt(
                    language: Language.English,
                    dsrMode: DsrMode.DsrNoFilter,
                    resultType: ResultType.Text
                ));
            string taskId = apiInstance.PostRecognizeReceipt(requestBody);
            Thread.Sleep(5000);
            var response = apiInstance.GetRecognizeReceipt(taskId);
            Assert.IsNotNull(response);
            Assert.That(response.ResponseStatusCode == ResponseStatusCode.Ok);
            File.WriteAllText($"results/{taskId}.txt", Encoding.UTF8.GetString(response.Results[0].Data));
        }



        [Test]
        public void PublicRecognizeRegionsApiTest()
        {
            var apiInstance = new RecognizeRegionsApi(clientId, clientSecret);

            var requestBody = new OCRRecognizeRegionsBody(
                    image: File.ReadAllBytes("samples/greek.png"),
                    settings: new OCRSettingsRecognizeRegions(
                        language: Language.Greek,
                        makeSkewCorrect: false,
                        makeContrastCorrection: false,
                        makeBinarization: false,
                        dsrMode: DsrMode.Regions,
                        regions: new List<OCRRegion>
                        {
                            new OCRRegion(new OCRRect(117, 81, 611, 98)), // only 1 region
                        }));
            string taskId = apiInstance.PostRecognizeRegions(requestBody);
            Thread.Sleep(5000);
            var response = apiInstance.GetRecognizeRegions(taskId);
            Assert.IsNotNull(response);
            Assert.That(response.ResponseStatusCode == ResponseStatusCode.Ok);
            File.WriteAllText($"results/{taskId}.txt", Encoding.UTF8.GetString(response.Results[0].Data));
        }


        [Test]
        public void PublicRecognizeTableApiTest()
        {
            var apiInstance = new RecognizeTableApi(clientId, clientSecret);

            var requestBody = new OCRRecognizeTableBody(
                    image: File.ReadAllBytes("samples/table_latin.png"),
                    settings: new OCRSettingsRecognizeTable(
                        language: Language.English,
                        dsrMode: DsrMode.NoDsrNoFilter,
                        resultTypeTable: ResultTypeTable.Text,
                        makeBinarization: false
                    ));
            string taskId = apiInstance.PostRecognizeTable(requestBody);
            Thread.Sleep(5000);
            var response = apiInstance.GetRecognizeTable(taskId);
            Assert.IsNotNull(response);
            Assert.That(response.ResponseStatusCode == ResponseStatusCode.Ok);
            File.WriteAllText($"results/{taskId}.txt", Encoding.UTF8.GetString(response.Results[0].Data));
        }
    }
}
