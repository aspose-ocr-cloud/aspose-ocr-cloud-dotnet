/*
 * Aspose OCR Cloud 4.0 API
 *
 * Aspose OCR Cloud 4.0 API
 *
 * The version of the OpenAPI document: 4.0

 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Aspose.OCR.Cloud.SDK.Client;
using Aspose.OCR.Cloud.SDK.Client.Auth;
using Aspose.OCR.Cloud.SDK.Api;
using Aspose.OCR.Cloud.SDK.Model;
using System.Text.RegularExpressions;
using System.Text;
using System.Threading;

namespace Aspose.OCR.Cloud.SDK.Test.Api
{
    /// <summary>
    ///  Class for testing RecognizeReceiptApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RecognizeReceiptApiTests
    {
        private RecognizeReceiptApi instance;

        
        
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            if (Config.SimpleInstanceCreation)
            {
                instance = new RecognizeReceiptApi(Config.TargetClientId, Config.TargetClientSecret);
            }
            else
            {
                var config = new Aspose.OCR.Cloud.SDK.Client.Configuration
                {
                    BasePath = Config.TargetURI,
                    OAuthTokenUrl = Config.TargetAuthURI,
                    OAuthClientId = Config.TargetClientId,
                    OAuthClientSecret = Config.TargetClientSecret,
                    OAuthFlow = OAuthFlow.APPLICATION
                };
                instance = new RecognizeReceiptApi(config);
            }
        }


        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }


        /// <summary>
        /// Test GetRecognizeReceipt
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForGetRecognizeReceipt")]
        public void GetRecognizeReceiptTest(string testCaseName, string id, bool saveFile = false, string expectedResult = "Success")
        {
            try
            {
                var response = instance.GetRecognizeReceipt(id);
                Assert.IsInstanceOf<OCRResponse>(response, "response is OCRResponse");
                if (response.Error != null)
                {
                    if (response.ResponseStatusCode == ResponseStatusCode.PartiallyNotFound)
                    {
                        Assert.AreEqual(expectedResult, "OCRError - PartiallyNotFound");
                        return;
                    }
                    else
                    {
                        Assert.AreEqual(expectedResult, "OCRError");
                        Console.WriteLine(string.Join(" --> ", response.Error.Messages));
                    };
                    if (response.Error.Messages.Contains("Invalid identifier"))
                    {
                        Assert.AreEqual(expectedResult, "OCRError - no results, bad id");
                    }
                    else
                    {
                        Assert.AreEqual(expectedResult, "OCRError");
                    }
                }

                if (response.Results == null)
                {
                    if (response.ResponseStatusCode == ResponseStatusCode.NoAnyResultData &&
                        response.TaskStatus == OCRTaskStatus.Pending)
                    {
                        Assert.AreEqual(expectedResult, "OCRError - no results. Pending.");
                    }
                    else
                    {
                        Assert.AreEqual(expectedResult, "OCRError - no results, bad id");
                    }
                }
                else
                {
                    string result = "";
                    foreach (OCRResult res in response.Results)
                    {
                        switch (res.Type)
                        {
                            case "Text":
                                result += Encoding.UTF8.GetString(res.Data);
                                break;
                            case "Other":
                                result += Encoding.UTF8.GetString(res.Data);
                                break;
                            default:
                                result += res.ToJson();
                                break;
                        }
                    }

                    Console.WriteLine("res.Type :::\n" + result);

                    if (saveFile)
                    {
                        Directory.CreateDirectory("results");
                        File.WriteAllText($"results/{id}.txt", result);
                    };

                    Assert.AreEqual(expectedResult, "Success");
                };
            }
            catch (ApiException ex)
            {
                Console.WriteLine(ex.ToString());
                Assert.AreEqual(expectedResult, "APIException");
            }
        }


        public static IEnumerable<object[]> GetArgsForGetRecognizeReceipt()
        {
            yield return new object[]  // standard GUID must exist in any database
             {
                "correct from archive", "00000000-0000-0000-0000-000000000000", true, "Success"
             };
            yield return new object[]  // empty id should throw APIException
            {
                "incorrect empty string", "", false, "APIException"
            };
            yield return new object[]  // incorrect id should generate response with error
            {
                "incorrect id", "00000000-0000-0000-0000-000000000000!!!!", false, "OCRError - no results, bad id"
            };
            yield return new object[]  // special char id should generate response with error
            {
                "incorrect id special char", "*", false, "OCRError - no results, bad id"
            };
            yield return new object[]  // SQL Injection should generate response with error
            {
                "incorrect id SQL injection", "(drop table users;)", false, "OCRError - no results, bad id"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id js NaN", "NaN", false, "OCRError - no results, bad id"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id js Null", "Null", false, "OCRError - no results, bad id"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id js None", "None", false, "OCRError - no results, bad id"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id string null", "null", false, "OCRError - no results, bad id"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id math", "=0", false, "OCRError - no results, bad id"
            };
        }

        /// <summary>
        /// Test PostRecognizeReceipt
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForPostRecognizeReceipt")]
        public void PostRecognizeReceiptTest(string testCaseName, PostRecognizeReceiptTestSettings testCase)
        {

            OCRSettingsRecognizeReceipt settings = new OCRSettingsRecognizeReceipt()
            {
                Language = testCase.Language,
                MakeContrastCorrection = testCase.MakeContrastCorrection,
                MakeSkewCorrect = testCase.MakeSkewCorrection,
                MakeBinarization = testCase.MakeBinarization,
                MakeSpellCheck = testCase.MakeSpellCheck,
                DsrMode = testCase.DsrMode,
                //DsrConfidence = testCase.DsrConfidence,
                ResultType = testCase.ResultType
            };
            OCRRecognizeReceiptBody body = new OCRRecognizeReceiptBody(testCase.Image, settings);

            var response = instance.PostRecognizeReceipt(body);
            Assert.IsInstanceOf<string>(response, "response is string");
            Console.WriteLine($"Task ID: {response}");
            Thread.Sleep((int)(testCase.WaitTime * 1000));
            GetRecognizeReceiptTest(response, response);
        }

        public static IEnumerable<object[]> GetArgsForPostRecognizeReceipt()
        {
            yield return new object[]
            {
            "simple English PNG",
            new PostRecognizeReceiptTestSettings()
            {
                Image =  File.ReadAllBytes("samples/receipt.PNG"),
                Language = Language.English,
                MakeContrastCorrection = false,
                DsrMode = DsrMode.NoDsrNoFilter,
                ResultType = ResultType.Text,
                WaitForResult = true,
                WaitTime = 10.0f
            }
            };
        }

        /// <summary>
        /// Struct for representation of image recognision test cases
        /// </summary>
        public struct PostRecognizeReceiptTestSettings
        {
            public byte[] Image;
            public Language Language = Language.English;
            public bool MakeContrastCorrection = false;
            public bool MakeBinarization = false;
            public bool MakeSkewCorrection = false;
            public bool MakeSpellCheck = false;
            public DsrMode DsrMode = DsrMode.NoDsrNoFilter;
            public DsrConfidence DsrConfidence = DsrConfidence.Mid;
            public ResultType ResultType = ResultType.Text;
            public float WaitTime = 0f;
            public bool WaitForResult = false;

            public PostRecognizeReceiptTestSettings(
                byte[] image,
                Language language = Language.English,
                bool makeContrastCorrection = false,
                bool makeSkewCorrection = false,
                bool makeSpellCheck = false,
                DsrMode dsrMode = DsrMode.NoDsrNoFilter,
                DsrConfidence dsrConfidence = DsrConfidence.Default,
                ResultType resultType = ResultType.Text,
                float waitTime = 0f,
                bool waitForResult = false)
            {
                this.Image = image ?? throw new ArgumentNullException(nameof(image));
                this.Language = language;
                this.MakeContrastCorrection = makeContrastCorrection;
                this.MakeSkewCorrection = makeSkewCorrection;
                this.MakeSpellCheck = makeSpellCheck;
                this.DsrMode = dsrMode;
                this.DsrConfidence = dsrConfidence;
                this.ResultType = resultType;
                this.WaitTime = waitTime;
                this.WaitForResult = waitForResult;
            }
        }
    }
}
