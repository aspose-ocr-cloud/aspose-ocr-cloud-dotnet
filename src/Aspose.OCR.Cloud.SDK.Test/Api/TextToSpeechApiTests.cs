/*
 * Aspose OCR Cloud 94.0 API
 *
 * Aspose OCR Cloud 94.0 API
 *
 * The version of the OpenAPI document: 94.0

 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Aspose.OCR.Cloud.SDK.Client;
using Aspose.OCR.Cloud.SDK.Client.Auth;
using Aspose.OCR.Cloud.SDK.Api;
using Aspose.OCR.Cloud.SDK.Model;
using System.Text.RegularExpressions;

namespace Aspose.OCR.Cloud.SDK.Test.Api
{
    /// <summary>
    ///  Class for testing TextToSpeechApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TextToSpeechApiTests
    {
        private TextToSpeechApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            if (Config.SimpleInstanceCreation)
            {
                instance = new TextToSpeechApi(Config.TargetClientId, Config.TargetClientSecret);
            }
            else
            {
                var config = new Aspose.OCR.Cloud.SDK.Client.Configuration
                {
                    BasePath = Config.TargetURI,
                    OAuthTokenUrl = Config.TargetAuthURI,
                    OAuthClientId = Config.TargetClientId,
                    OAuthClientSecret = Config.TargetClientSecret,
                    OAuthFlow = OAuthFlow.APPLICATION
                };
                instance = new TextToSpeechApi(config);
            }
        }


        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }


        /// <summary>
        /// Test GetTextToSpeechResult
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForGetTextToSpeechResult")]
        public void GetTextToSpeechResultTest(string testCaseName, string id, bool saveFile = false, string expectedResult = "Success")
        {
            try
            {
                var response = instance.GetTextToSpeechResult(id);
                Assert.IsInstanceOf<TTSResponse>(response, "response is TTSResponse");
                if (response.Error != null)
                {
                    if (response.ResponseStatusCode == ResponseStatusCode.PartiallyNotFound)
                    {
                        Assert.AreEqual(expectedResult, "OCRError - PartiallyNotFound");
                        return;
                    }
                    else
                    {
                        Assert.AreEqual(expectedResult, "OCRError");
                        Console.WriteLine(string.Join(" --> ", response.Error.Messages));
                    }
                }

                if (response.Results == null)
                {
                    Assert.AreEqual(expectedResult, "OCR Error");
                }
                else
                {
                    if (saveFile)
                    {
                        byte[] soundFile = response.Results[0].Data;
                        string extension = response.Results[0].Type switch
                        {
                            "WavFile" => "wav",
                            _ => "wav"
                        };
                        Directory.CreateDirectory("results");
                        File.WriteAllBytes($"results/{response.Id}.{extension}", soundFile);
                    };

                    Assert.AreEqual(expectedResult, "Success");
                };
            }
            catch (ApiException)
            {
                Assert.AreEqual(expectedResult, "API exception");
            }
        }


        public static IEnumerable<object[]> GetArgsForGetTextToSpeechResult()
        {
            yield return new object[]  // standard GUID must exist in any database
            {
                "correct from archive", "TTS00000-0000-0000-0000-000000000000", true, "OCRError - PartiallyNotFound"
            };
            yield return new object[]  // empty id should throw APIException
            {
                "incorrect id empty string", "", false, "API exception"
            };
            yield return new object[]  // incorrect id should generate response with error
            {
                "incorrect id", "00000000-0000-0000-0000-000000000000!!!!", false, "OCR Error"
            };
            yield return new object[]  // special char id should generate response with error
            {
                "incorrect id", "*", false, "OCR Error"
            };
            yield return new object[]  // SQL Injection should generate response with error
            {
                "incorrect id", "(drop table users;)", false, "OCR Error"
            };
        }

        /// <summary>
        /// Test GetTextToSpeechResultFile
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForGetTextToSpeechResultFile")]
        public void GetTextToSpeechResultFileTest(string testCaseName, string id, bool saveFile = false, string expectedResult = "Success")
        {
            try
            {
                var responseRaw = instance.GetTextToSpeechResultFile(id);
                ApiResponse<byte[]> response = (ApiResponse<byte[]>)responseRaw;
                Assert.IsInstanceOf<ApiResponse<byte[]>>(response, "response is bytearray response");
                if (response.Data == null) Assert.AreEqual(expectedResult, "OCRError");
                if (!response.Headers.ContainsKey("Accept") ||
                    !(new string[] { "audio/wav" }.Intersect(response.Headers["Accept"]).Any()))
                {
                    Assert.AreEqual(expectedResult, "OCRError");
                }
                else
                {
                    if (saveFile)
                    {
                        byte[] soundFile = response.Data;
                        string extension = response.Headers["Accept"].First() switch
                        {
                            "audio/wav" => "wav",
                            _ => "wav"
                        };
                        Directory.CreateDirectory("results");
                        File.WriteAllBytes($"{id}.{extension}", soundFile);
                    };

                    Assert.AreEqual(expectedResult, "Success");
                };
            }
            catch (ApiException)
            {
                Assert.AreEqual(expectedResult, "API Exception");
            }
        }


        public static IEnumerable<object[]> GetArgsForGetTextToSpeechResultFile()
        {
            yield return new object[]  // standard GUID must exist in any database
            {
                "correct id from archive", "TTS00000-0000-0000-0000-000000000000", true, "Success"
            };
            yield return new object[]  // empty id should throw APIException
            {
                "incorrect id empty string", "", false, "API Exception"
            };
            yield return new object[]  // incorrect id should generate response with error
            {
                "incorrect id", "00000000-0000-0000-0000-000000000000!!!!", false, "API Exception"
            };
            yield return new object[]  // special char id should generate response with error
            {
                "incorrect id special char", "*", false, "API Exception"
            };
            yield return new object[]  // SQL Injection should generate response with error
            {
                "incorrect id SQL injection", "(drop table users;)", false, "API Exception"
            };
        }

        /// <summary>
        /// Test PostTextToSpeech
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForPostTextToSpeech")]
        public void PostTextToSpeechTest(
            string testCaseName,
            string text,
            LanguageTTS language,
            ResultTypeTTS resultType,
            bool saveFile = false,
            string expectedResult = "Success")
        {
            var response = instance.PostTextToSpeech(new TTSBody(text, language, resultType));
            Assert.IsInstanceOf<string>(response, "response is string");
            Console.WriteLine(response);
            Assert.IsTrue(Regex.IsMatch(response,
                "^TTS(?:\\{{0,1}(?:[0-9a-fA-F]){5}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){12}\\}{0,1})$"));
            if (saveFile)
            {
                GetTextToSpeechResultTest(response, response, saveFile: true);
            }
        }


        public static IEnumerable<object[]> GetArgsForPostTextToSpeech()
        {
            yield return new object[]
            {
                "Simple text", "This is a test speech", LanguageTTS.English, ResultTypeTTS.Wav, true, "Success"
            };
        }
    }
}
