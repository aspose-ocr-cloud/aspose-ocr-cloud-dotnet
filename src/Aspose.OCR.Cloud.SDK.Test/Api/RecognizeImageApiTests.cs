/*
 * Aspose OCR Cloud 4.0 API
 *
 * Aspose OCR Cloud 4.0 API
 *
 * The version of the OpenAPI document: 4.0

 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Aspose.OCR.Cloud.SDK.Client;
using Aspose.OCR.Cloud.SDK.Client.Auth;
using Aspose.OCR.Cloud.SDK.Api;
using Aspose.OCR.Cloud.SDK.Model;
using System.Text.RegularExpressions;
using System.Text;

namespace Aspose.OCR.Cloud.SDK.Test.Api
{
    /// <summary>
    ///  Class for testing RecognizeImageApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RecognizeImageApiTests
    {
        private RecognizeImageApi instance;

        
        
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {   
            if (Config.SimpleInstanceCreation)
            {
                instance = new RecognizeImageApi(Config.TargetClientId, Config.TargetClientSecret);
            }
            else
            {
                var config = new Aspose.OCR.Cloud.SDK.Client.Configuration
                {
                    BasePath = Config.TargetURI,
                    OAuthTokenUrl = Config.TargetAuthURI,
                    OAuthClientId = Config.TargetClientId,
                    OAuthClientSecret = Config.TargetClientSecret,
                    OAuthFlow = OAuthFlow.APPLICATION
                };
                instance = new RecognizeImageApi(config);
            }
        }


        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }



        /// <summary>
        /// Test GetRecognizeImage
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForGetRecognizeImage")]
        public void GetRecognizeImageTest(string testCaseName, string id, bool saveFile = false, string expectedResult = "Success")
        {
            try
            {
                var response = instance.GetRecognizeImage(id);
                Assert.IsInstanceOf<OCRResponse>(response, "response is OCRResponse");
                if (response.Error != null)
                {
                    if (response.ResponseStatusCode == ResponseStatusCode.PartiallyNotFound)
                    {
                        Assert.AreEqual(expectedResult, "OCRError - PartiallyNotFound");
                        return;
                    }
                    else
                    {
                        Assert.AreEqual(expectedResult, "OCRError");
                        Console.WriteLine(string.Join(" --> ", response.Error.Messages));
                    }
                }

                if (response.Results == null)
                {
                    Assert.AreEqual(expectedResult, "OCRError");
                }
                else
                {
                    string result = "";
                    foreach (OCRResult res in response.Results)
                    {
                        switch (res.Type)
                        {
                            case "Text":
                                result += Encoding.UTF8.GetString(res.Data);
                                break;
                            case "Other":
                                result += Encoding.UTF8.GetString(res.Data);
                                break;
                            default:
                                result += res.ToJson();
                                break;
                        }
                    }

                    Console.WriteLine("res.Type :::\n" + result);

                    if (saveFile)
                    {
                        Directory.CreateDirectory("results");
                        File.WriteAllText($"results/{id}.txt", result);
                    };

                    Assert.AreEqual(expectedResult, "Success");
                };
            }
            catch (ApiException ex)
            {
                Console.WriteLine(ex.ToString());
                Assert.AreEqual(expectedResult, "APIException");
            }
        }

        
        public static IEnumerable<object[]> GetArgsForGetRecognizeImage()
        {
            yield return new object[]  // standard GUID must exist in any database
             {
                "correct from archive", "00000000-0000-0000-0000-000000000000", true, "OCRError - PartiallyNotFound"
             };
            yield return new object[]  // empty id should throw APIException
            {
                "incorrect empty string", "", false, "APIException"
            };
            yield return new object[]  // incorrect id should generate response with error
            {
                "incorrect id", "00000000-0000-0000-0000-000000000000!!!!", false, "OCRError"
            };
            yield return new object[]  // special char id should generate response with error
            {
                "incorrect id special char", "*", false, "OCRError"
            };
            yield return new object[]  // SQL Injection should generate response with error
            {
                "incorrect id SQL injection", "(drop table users;)", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id js NaN", "NaN", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id js Null", "Null", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id js None", "None", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id string null", "null", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id math", "=0", false, "OCRError"
            };
        }

        /// <summary>
        /// Test PostRecognizeImage
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForPostRecognizeImage")]
        public void PostRecognizeImageTest(string testCaseName, PostRecognizeImageTestSettings testCase)
        {
            try
            {

                OCRSettingsRecognizeImage settings = new OCRSettingsRecognizeImage()
                {
                    Language = testCase.Language,
                    MakeContrastCorrection = testCase.MakeContrastCorrection,
                    MakeSkewCorrect = testCase.MakeSkewCorrection,
                    MakeBinarization = testCase.MakeBinarization,
                    MakeSpellCheck = testCase.MakeSpellCheck,
                    DsrMode = testCase.DsrMode,
                    //DsrConfidence = testCase.DsrConfidence,
                    ResultType = testCase.ResultType
                };
                OCRRecognizeImageBody body = new OCRRecognizeImageBody(testCase.Image, settings);

                var response = instance.PostRecognizeImage(body);
                Assert.IsInstanceOf<string>(response, "response is string");
                Console.WriteLine($"Task ID: {response}");

                GetRecognizeImageTest(response, response);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                Assert.AreEqual("Post error", 0);
            }
        }

        public static IEnumerable<object[]> GetArgsForPostRecognizeImage()
        {
            yield return new object[]
            {
                "simple English PNG",
                new PostRecognizeImageTestSettings()
                {
                    Image =  File.ReadAllBytes("samples/latin.png"),
                    Language = Language.English,
                    MakeContrastCorrection = false,
                    DsrMode = DsrMode.NoDsrNoFilter,
                    ResultType = ResultType.Text,
                    WaitForResult = true,
                    WaitTime = 10.0f
                }
            };
            yield return new object[]
            {
                "simple Hindi PNG",
                new PostRecognizeImageTestSettings()
                {
                    Image =  File.ReadAllBytes("samples/hindi.png"),
                    Language = Language.Hindi,
                    MakeContrastCorrection = false,
                    DsrMode = DsrMode.NoDsrNoFilter,
                    ResultType = ResultType.Text,
                    WaitForResult = true,
                    WaitTime = 1.0f
                }
            };
            yield return new object[]
            {
                "simple Chinese JPG",
                new PostRecognizeImageTestSettings()
                {
                    Image =  File.ReadAllBytes("samples/chinese.jpg"),
                    Language = Language.Chinese,
                    MakeContrastCorrection = false,
                    ResultType = ResultType.Text,
                    WaitForResult = true,
                    WaitTime = 1.0f
                }
            };
            yield return new object[]
            {
                "simple Arabic JPG",
                new PostRecognizeImageTestSettings()
                {
                    Image =  File.ReadAllBytes("samples/arabic.jpg"),
                    Language = Language.Arabic,
                    MakeContrastCorrection = false,
                    DsrMode = DsrMode.NoDsrNoFilter,
                    ResultType = ResultType.Text,
                    WaitForResult = true,
                    WaitTime = 1.0f
                }
            };
            yield return new object[]
            {
                "skew correction + contrast correction English PNG",
                new PostRecognizeImageTestSettings()
                {
                    Image =  File.ReadAllBytes("samples/latin_contrast_skew.png"),
                    Language = Language.English,
                    MakeContrastCorrection = true,
                    MakeSkewCorrection = true,
                    DsrMode = DsrMode.NoDsrNoFilter,
                    ResultType = ResultType.Text,
                    WaitForResult = true,
                    WaitTime = 10.0f
                }
            };
            yield return new object[]
            {
                "contrast correction Cyrillic JPEG",
                new PostRecognizeImageTestSettings()
                {
                    Image =  File.ReadAllBytes("samples/binarization.jpeg"),
                    Language = Language.Russian,
                    MakeContrastCorrection = true,
                    MakeSkewCorrection = false,
                    MakeBinarization = true,
                    DsrMode = DsrMode.NoDsrNoFilter,
                    ResultType = ResultType.Text,
                    WaitForResult = true,
                    WaitTime = 10.0f
                }
            }; 
            //yield return new object[]
            //{
            //    "simple Cyrillic JPEG",
            //    new PostRecognizeImageTestSettings()
            //    {
            //        Image =  File.ReadAllBytes("samples/1/1.jpg"),
            //        Language = Language.Russian,
            //        MakeContrastCorrection = true,
            //        MakeSkewCorrection = false,
            //        MakeBinarization = false,
            //        DsrMode = DsrMode.NoDsrNoFilter,
            //        ResultType = ResultType.Text,
            //        WaitForResult = true,
            //        WaitTime = 10.0f
            //    }
            //};
        }

        /// <summary>
        /// Struct for representation of image recognision test cases
        /// </summary>
        public struct PostRecognizeImageTestSettings
        {
            public byte[] Image;
            public Language Language = Language.English;
            public bool MakeContrastCorrection = false;
            public bool MakeBinarization = false;
            public bool MakeSkewCorrection = false;
            public bool MakeSpellCheck = false;
            public DsrMode DsrMode = DsrMode.NoDsrNoFilter;
            public DsrConfidence DsrConfidence = DsrConfidence.Mid;
            public ResultType ResultType = ResultType.Text;
            public float WaitTime = 0f;
            public bool WaitForResult = false;

            public PostRecognizeImageTestSettings(
                byte[] image,
                Language language = Language.English,
                bool makeContrastCorrection = false,
                bool makeSkewCorrection = false,
                bool makeSpellCheck = false,
                DsrMode dsrMode = DsrMode.NoDsrNoFilter,
                DsrConfidence dsrConfidence = DsrConfidence.Default,
                ResultType resultType = ResultType.Text,
                float waitTime = 0f,
                bool waitForResult = false)
            {
                this.Image = image ?? throw new ArgumentNullException(nameof(image));
                this.Language = language;
                this.MakeContrastCorrection = makeContrastCorrection;
                this.MakeSkewCorrection = makeSkewCorrection;
                this.MakeSpellCheck = makeSpellCheck;
                this.DsrMode = dsrMode;
                this.DsrConfidence = dsrConfidence;
                this.ResultType = resultType;
                this.WaitTime = waitTime;
                this.WaitForResult = waitForResult;
            }
        }
    }
}
