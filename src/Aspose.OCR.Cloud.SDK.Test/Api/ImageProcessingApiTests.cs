/*
 * Aspose OCR Cloud 4.0 API
 *
 * Aspose OCR Cloud 4.0 API
 *
 * The version of the OpenAPI document: 4.0

 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Aspose.OCR.Cloud.SDK.Client;
using Aspose.OCR.Cloud.SDK.Client.Auth;
using Aspose.OCR.Cloud.SDK.Api;
using Aspose.OCR.Cloud.SDK.Model;
using System.Text.RegularExpressions;
using System.Runtime.Serialization.Formatters.Binary;

namespace Aspose.OCR.Cloud.SDK.Test.Api
{
    /// <summary>
    ///  Class for testing ImageProcessingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ImageProcessingApiTests
    {
        private ImageProcessingApi instance;

        
        
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            if (Config.SimpleInstanceCreation)
            {
                instance = new ImageProcessingApi(Config.TargetClientId, Config.TargetClientSecret);
            }
            else
            {
                var config = new Aspose.OCR.Cloud.SDK.Client.Configuration
                {
                    BasePath = Config.TargetURI,
                    OAuthTokenUrl = Config.TargetAuthURI,
                    OAuthClientId = Config.TargetClientId,
                    OAuthClientSecret = Config.TargetClientSecret,
                    OAuthFlow = OAuthFlow.APPLICATION
                };
                instance = new ImageProcessingApi(config);
            }
        }


        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }


        /// <summary>
        /// Test GetResultFile
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForGetResultFile")]
        public void GetResultFileTest(string testCaseName, string id, bool saveFile = false, string expectedResult = "Success")
        {
            try
            {
                var responseRaw = instance.GetResultFile(id);
                ApiResponse<byte[]> response = (ApiResponse<byte[]>)responseRaw;
                Assert.IsInstanceOf<ApiResponse<byte[]>>(response, "response is bytearray response");
                if (response.Data == null) Assert.AreEqual(expectedResult, "API Error - response data is null");
                if (!response.Headers.ContainsKey("Content-Type") || //&&
                    !(new string[] { "image/png", "application/octet-stream" }.Intersect(response.Headers["Content-Type"]).Any()))
                {
                    Assert.AreEqual(expectedResult, "API Error - bad headers");
                }
                else
                {
                    if (saveFile)
                    {
                        byte[] file = response.Data;
                        string extension = response.Headers["Content-Type"].First() switch
                        {
                            "image/png" => "png",
                            _ => "png"
                        };
                        File.WriteAllBytes($"results/{id}.{extension}", file);
                    };

                    Assert.AreEqual(expectedResult, "Success");
                };
            }
            catch (ApiException ex)
            {
                switch (ex.ErrorCode)
                {
                    case 400:
                        Assert.AreEqual(expectedResult, "API Error - endpoint not found");
                        break;
                    default:
                        Console.WriteLine($"Unexpected APIException: {ex.ErrorCode} - {ex.Message}");
                        Assert.AreEqual(expectedResult, "API Error - unexpected error");
                        break;
                };
            }
        }


        public static IEnumerable<object[]> GetArgsForGetResultFile()
        {
            yield return new object[]  // standard GUID must exist in any database
             {
                "correct from archive", "00000000-0000-0000-0000-000000000000", true, "Success"
             };
            yield return new object[]  // empty id should throw APIException
            {
                "incorrect empty string", "", false, "APIException"
            };
            yield return new object[]  // incorrect id should generate response with error
            {
                "incorrect id", "00000000-0000-0000-0000-000000000000!!!!", false, "OCRError"
            };
            yield return new object[]  // special char id should generate response with error
            {
                "incorrect id special char", "*", false, "OCRError"
            };
            yield return new object[]  // SQL Injection should generate response with error
            {
                "incorrect id SQL injection", "(drop table users;)", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id js NaN", "NaN", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id js Null", "Null", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id js None", "None", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id string null", "null", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id math", "=0", false, "OCRError"
            };
        }

        /// <summary>
        /// Test GetResultTask
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForGetResultTask")]
        public void GetResultTaskTest(string testCaseName, string id, bool saveFile = false, string expectedResult = "Success")
        {
            try
            {
                var response = instance.GetResultTask(id);
                Assert.IsInstanceOf<OCRResponse>(response, "response is OCRResponse");
                if (response.Error != null) Assert.AreEqual(expectedResult, "OCRError");
                if (response.Results == null)
                {
                    if (response.ResponseStatusCode == ResponseStatusCode.PartiallyNotFound)
                    {
                        Assert.AreEqual(expectedResult, "OCRError - PartiallyNotFound");
                        return;
                    }
                    else
                    {
                        Assert.AreEqual(expectedResult, "OCRError");
                        Console.WriteLine(string.Join(" --> ", response.Error.Messages));
                    };
                }
                else
                {
                    if (saveFile)
                    {
                        byte[] imageFile = response.Results[0].Data;
                        string extension = response.Results[0].Type switch
                        {
                            "ImagePNG" => "png",
                            _ => "txt"
                        };
                        Directory.CreateDirectory("results");
                        File.WriteAllBytes($"results/{response.Id}.{extension}", imageFile);
                    };

                    Assert.AreEqual(expectedResult, "Success");
                };
            }

            catch (ApiException ex)
            {
                switch (ex.ErrorCode)
                {
                    case 400:
                        Assert.AreEqual(expectedResult, "API Error - endpoint not found");
                        break;
                    default:
                        Console.WriteLine($"Unexpected APIException: {ex}");
                        Assert.AreEqual(expectedResult, "APIException");
                        break;
                };
            }
        }


        public static IEnumerable<object[]> GetArgsForGetResultTask()
        {
            yield return new object[]  // standard GUID must exist in any database
             {
                "correct from archive", "00000000-0000-0000-0000-000000000000", true, "Success"
             };
            yield return new object[]  // empty id should throw APIException
            {
                "incorrect empty string", "", false, "API Error - endpoint not found"
            };
            yield return new object[]  // incorrect id should generate response with error
            {
                "incorrect id", "00000000-0000-0000-0000-000000000000!!!!", false, "OCRError"
            };
            yield return new object[]  // special char id should generate response with error
            {
                "incorrect id special char", "*", false, "OCRError"
            };
            yield return new object[]  // SQL Injection should generate response with error
            {
                "incorrect id SQL injection", "(drop table users;)", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id js NaN", "NaN", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id js Null", "Null", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id js None", "None", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id string null", "null", false, "OCRError"
            };
            yield return new object[]  // js buggable value
            {
                "incorrect id math", "=0", false, "OCRError"
            };
        }

        /// <summary>
        /// Test PostBinarizationFile
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForPostBinarizationFile")]
        public void PostBinarizationFileTest(string testCaseName, byte[] data, bool saveFile = false, string expectedResult = "Success")
        {
            using (Stream fileStream = new MemoryStream(data))
            {
                string response = instance.PostBinarizationFile(fileStream);
                Assert.IsInstanceOf<string>(response, "response is string");
                Assert.IsTrue(Regex.IsMatch(response,
                    "^(?:\\{{0,1}(?:[0-9a-fA-F]){8}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){12}\\}{0,1})$"));
                Console.WriteLine($"Task ID: {response}");
                if (saveFile)
                {
                    GetResultTaskTest(response, response, saveFile: true);
                }
            }
        }


        public static IEnumerable<object[]> GetArgsForPostBinarizationFile()
        {

            yield return new object[]
            {
                "simple binarization file", File.ReadAllBytes("samples/binarization.jpeg"), true, "Success"
            };
        }

        /// <summary>
        /// Test PostDewarpingFile
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForPostDewarpingFile")]
        public void PostDewarpingFileTest(string testCaseName, byte[] data, bool saveFile = false, string expectedResult = "Success")
        {
            using (Stream fileStream = new MemoryStream(data))
            {
                string response = instance.PostDewarpingFile(fileStream);
                Assert.IsInstanceOf<string>(response, "response is string");
                Assert.IsTrue(Regex.IsMatch(response,
                    "^(?:\\{{0,1}(?:[0-9a-fA-F]){8}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){12}\\}{0,1})$"));
                Console.WriteLine($"Task ID: {response}");
                if (saveFile)
                {
                    GetResultTaskTest(response, response, saveFile: true);
                }
            }
        }


        public static IEnumerable<object[]> GetArgsForPostDewarpingFile()
        {
            yield return new object[]
            {
                "Text warped file", File.ReadAllBytes("samples/dewarping.png"), true, "Success"
            };
            yield return new object[]
            {
                "4-channel png ", File.ReadAllBytes("samples/dewarping_4_channel.png"), true, "Success"
            };
        }


        /// <summary>
        /// Test PostSkewCorrectionFile
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForPostSkewCorrectionFile")]
        public void PostSkewCorrectionFileTest(string testCaseName, byte[] data, bool saveFile = false, string expectedResult = "Success")
        {
            using (Stream fileStream = new MemoryStream(data))
            {
                string response = instance.PostSkewCorrectionFile(fileStream);
                Assert.IsInstanceOf<string>(response, "response is string");
                Assert.IsTrue(Regex.IsMatch(response,
                    "^(?:\\{{0,1}(?:[0-9a-fA-F]){8}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){12}\\}{0,1})$"));
                Console.WriteLine($"Task ID: {response}");
                if (saveFile)
                {
                    GetResultTaskTest(response, response, saveFile: true);
                }
            }
        }


        public static IEnumerable<object[]> GetArgsForPostSkewCorrectionFile()
        {
            yield return new object[]
            {
                "Text skewed file", File.ReadAllBytes("samples/latin_skew.png"), true, "Success"
            };
        }

        /// <summary>
        /// Test PostUpsamplingFile
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForPostUpsamplingFile")]
        public void PostUpsamplingFileTest(string testCaseName, byte[] data, bool saveFile = false, string expectedResult = "Success")
        {
            using (Stream fileStream = new MemoryStream(data))
            {
                string response = instance.PostUpsamplingFile(fileStream);
                Assert.IsInstanceOf<string>(response, "response is string");
                Assert.IsTrue(Regex.IsMatch(response,
                    "^(?:\\{{0,1}(?:[0-9a-fA-F]){8}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){12}\\}{0,1})$"));
                Console.WriteLine($"Task ID: {response}");
                if (saveFile)
                {
                    GetResultTaskTest(response, response, saveFile: true);
                }
            }
        }


        public static IEnumerable<object[]> GetArgsForPostUpsamplingFile()
        {
            yield return new object[]
            {
                "Text lowres file", File.ReadAllBytes("samples/upsampling.png"), true, "Success"
            };
        }
    }
}
