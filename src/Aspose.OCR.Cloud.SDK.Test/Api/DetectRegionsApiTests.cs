/*
 * Aspose OCR Cloud 4.0 API
 *
 * Aspose OCR Cloud 4.0 API
 *
 * The version of the OpenAPI document: 4.0

 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Aspose.OCR.Cloud.SDK.Client;
using Aspose.OCR.Cloud.SDK.Client.Auth;
using Aspose.OCR.Cloud.SDK.Api;
using Aspose.OCR.Cloud.SDK.Model;
using System.Text.RegularExpressions;
using System.Text;

namespace Aspose.OCR.Cloud.SDK.Test.Api
{
    /// <summary>
    ///  Class for testing DetectRegionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DetectRegionsApiTests
    {
        private DetectRegionsApi instance;

        
        
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            if (Config.SimpleInstanceCreation)
            {
                instance = new DetectRegionsApi(Config.TargetClientId, Config.TargetClientSecret);
            }
            else
            {
                var config = new Aspose.OCR.Cloud.SDK.Client.Configuration
                {
                    BasePath = Config.TargetURI,
                    OAuthTokenUrl = Config.TargetAuthURI,
                    OAuthClientId = Config.TargetClientId,
                    OAuthClientSecret = Config.TargetClientSecret,
                    OAuthFlow = OAuthFlow.APPLICATION
                };
                instance = new DetectRegionsApi(config);
            }
        }


        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }


        /// <summary>
        /// Test GetDetectRegions with task as result
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForGetDetectRegionsResultTask")]
        public void GetDetectRegionsResultTaskTest(string id, bool saveFile = false, string expectedResult = "Success")
        {
            try
            {
                var response = instance.GetDetectRegions(id);
                Assert.IsInstanceOf<OCRResponse>(response, "response is OCRResponse");
                if (response.Error != null)
                {
                    if (response.ResponseStatusCode == ResponseStatusCode.PartiallyNotFound)
                    {
                        Assert.AreEqual(expectedResult, "OCRError - PartiallyNotFound");
                        return;
                    }
                    else
                    {
                        Assert.AreEqual(expectedResult, "OCRError");
                        Console.WriteLine(string.Join(" --> ", response.Error.Messages));
                    };
                }

                if (response.Results == null)
                {
                    Assert.AreEqual(expectedResult, "OCR Error");
                }
                else
                {
                    string result = "";
                    foreach (OCRResult res in response.Results)
                    {
                        switch (res.Type)
                        {
                            case "Text":
                                result += Encoding.UTF8.GetString(res.Data);
                                break;
                            case "Other":
                                result += Encoding.UTF8.GetString(res.Data);
                                break;
                            default:
                                result += res.ToJson();
                                break;
                        }

                    }

                    Console.WriteLine("res.Type :::\n" + result);

                    if (saveFile)
                    {
                        Directory.CreateDirectory("results");
                        File.WriteAllText($"results/{id}.txt", result);
                    };

                    Assert.AreEqual(expectedResult, "Success");
                };
            }
            catch (ApiException ex)
            {
                Console.WriteLine(ex.ToString());
                Assert.AreEqual(expectedResult, "API exception");
            }
        }


        public static IEnumerable<object[]> GetArgsForGetDetectRegionsResultTask()
        {
            yield return new object[]  // standard GUID must exist in any database
             {
                "00000000-0000-0000-0000-000000000000", true, "Success"
             };
            yield return new object[]  // empty id should throw APIException
            {
                "", false, "API exception"
            };
            yield return new object[]  // incorrect id should generate response with error
            {
                "00000000-0000-0000-0000-000000000000!!!!", false, "OCR Error"
            };
            yield return new object[]  // special char id should generate response with error
            {
                "*", false, "OCR Error"
            };
            yield return new object[]  // SQL Injection should generate response with error
            {
                "(drop table users;)", false, "OCR Error"
            };
            yield return new object[]  // js buggable value
            {
                "NaN", false, "OCR Error"
            };
            yield return new object[]  // js buggable value
            {
                "Null", false, "OCR Error"
            };
            yield return new object[]  // js buggable value
            {
                "None", false, "OCR Error"
            };
            yield return new object[]  // js buggable value
            {
                "null", false, "OCR Error"
            };
            yield return new object[]  // js buggable value
            {
                "=0", false, "OCR Error"
            };
        }



        /// <summary>
        /// Test PostDetectRegionsTask
        /// </summary>
        [Test]
        [TestCaseSource("GetArgsForPostDetectRegionsTask")]
        public void PostDetectRegionsTaskTest(byte[] image, ResultType resultType, bool waitForResult)
        {
            var requestBody = new OCRDetectRegionsBody(image, new OCRSettingsDetectRegions());
            string response = instance.PostDetectRegions(requestBody);
            Assert.IsInstanceOf<string>(response, "response is string");
            Assert.IsTrue(Regex.IsMatch(response,
                "^(?:\\{{0,1}(?:[0-9a-fA-F]){8}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){12}\\}{0,1})$"));
            if (waitForResult)
            {
                GetDetectRegionsResultTaskTest(response, saveFile: true);
            }
        }

        public static IEnumerable<object[]> GetArgsForPostDetectRegionsTask()
        {
            //yield return new object[]
            //{
            //    File.ReadAllBytes("samples/detect_regions.png"), ResultType.Text, true
            //};
            yield return new object[]
            {
                File.ReadAllBytes("samples/greek.png"), ResultType.Text, true
            };
        }
    }
}
